#!/bin/bash

# 
# postmortem - automate tasks related to my daily postmortem reports
# 
# CHANGE LOG:
# 
# v0.1   2012-02-01 - Morgan Aldridge <morgant@makkintosshu.com>
#                     Initial version, based on bash_stub.
# v0.2   2012-02-10 - Morgan Aldridge
#                     Support for user-specific config file. Builds email
#                     recipients from config values.
# v0.2.1 2012-05-29 - Morgan Aldridge
#                     Properly escape quotes in email message body.
# v0.3   2012-12-04 - Morgan Aldridge
#                     Now brings Mail to front & converts message to plain text.
#                     Supports specifying past date of postmortem to email.
# v0.4   2013-02-05 - Morgan Aldridge
#                     Support for calculating hours worked for any number of
#                     days past.
# v0.5   2013-12-27 - Morgan Aldridge
#                     Support for finding all issues worked on for any number of
#                     days past. New option to include today in hours/issues
#                     calculations/reporting.
# v0.6   2015-06-02 - Morgan Aldridge
#                     Support for opening previous day's postmortem.
# 
# LICENSE:
# 
# Copyright (c) 2012, Morgan T. Aldridge. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

# info
tool=$(basename "$0")
version='0.6'
copyright='Copyright (c) 2012-2015 Morgan T. Aldridge <morgant@makkintosshu.com>'

# global variables
verbose=false
include_today=false

editor="vi"
postmortems_path="/Users/morgan/Documents/Daily Postmortems"
template="${postmortems_path}/template.txt"
config="${HOME}/.postmortem"

# include the user's personalized config, if it exists
if [ -f "$config" ]; then
	source "$config"
fi

date="$(date +%Y-%m-%d)"
year="$(date +%Y)"
month="$(date +%m)"

# print usage instructions (help)
function usage()
{
	cat <<-EOM
	Usage: $tool [options] command
	  -h, --help           print these usage instructions
	  -v, --verbose        verbose output
	  -V, --version        print the version
	  -T, --include-today  include today in hours/issues reporting
	
	Commands:
	  init                 initialize postmortems directories
	  template             open the postmortem template
	  today                create and/or open postmortem for today
	  yesterday            create and/or open postmortem for yesterday
	  email [date]         compose new email in Mail with postmortem for today (accepts
	                         optional date: 'yesterday' or 'YYYY-MM-DD' formatted)
	  hours [days]         calculate hours worked for past number of days (default: 7)
	  issues [days]        output list of issues referenced for past number of days (default: 7)
	
	Configuration:
	  A configuration file can be created at ~/.postmortem which sets one or more
	  of the following variables:
	
	  editor               command to be run to edit template & postmortems
	  postmortems_path     path where postmortems should be stored & managed
	  email_to             array of addresses to put in email to: field
	  email_cc             array of addresses to put in email cc: field
	EOM
}

# print version info
function version()
{
	echo "$tool v$version $copyright"
}

# 
# in_array() - determine whether a value is contained in an array
# 
# @param string The value which you're checking if exists in the array.
# @param mixed The array in which you're checking for the value.
# @returns 0 (true) if the value was found in the array, otherwise 1 (false).
# 
function in_array() {
	local found=false
	local value="$1"
	shift
	
	if [ -z "$value" ]; then $found; fi
	if [ ${#@} -lt 1 ]; then $found; fi
	for array_value in "$@"; do
		if [ "$value" = "$array_value" ]; then found=true; fi
	done
	
	$found
}

# initialize postmortem paths
function init_postmortems()
{
	local success=true
	
	if $verbose; then echo "Initializing postmortem directories in '${postmortems_path}'..."; fi
	
	# does the main postmortems path exist?
	if [ -d "$postmortems_path" ]; then
		# does the template file exist?
		if [ ! -e "$template" ]; then
			# create an empty template file
			if $verbose; then echo -n "Creating empty template file '${template}'..."; fi
			if ! touch "$template"; then
				echo "ERROR! Unable to create template file '${template}'!"
				success=false
			else
				if $verbose; then echo "Done."; fi
			fi
		fi
		
		# does the year directory exist?
		local year_path="${postmortems_path}/${year}"
		if [ ! -d "$year_path" ]; then
			# create the year directory
			if $verbose; then echo -n "Creating year directory '${year_path}'... "; fi
			if ! mkdir "$year_path"; then
				echo "ERROR! Unable to create year directory '${year_path}! Unable to proceed!"
				success=false
			else
				if $verbose; then echo "Done."; fi
			fi
		fi
		
		if $success; then
			local month_path="${year_path}/${month}"
			# does the month directory exist?
			if [ ! -d "$month_path" ]; then
				# create the month path
				if $verbose; then echo -n "Creating month directory '${month_path}'... "; fi
				if ! mkdir "$month_path"; then
					echo "ERROR! Unable to create month directory '${month_path}'!"
					success=false
				else
					if $verbose; then echo "Done."; fi
				fi
			fi
		fi
		
		if $success && $verbose; then echo "Done."; fi
	else
		echo "ERROR! Base postmortem directory '${postmortems_path}' doesn't exist! Unable to proceed!"
		success=false
	fi
	
	$success
}

# open the template for postmortems
function template()
{
	local success=true
	
	# does the template file exist or need to be initialized?
	if [ ! -e "${template}" ]; then
		if ! init_postmortems; then
			success=false
		fi
	fi
	
	# open the template
	if $success; then
		if $verbose; then echo "Opening '${template}'..."; fi
		$editor "$template"
	fi
	
	$success
}

# create and/or open today's postmortem
function today()
{
	open_postmortem
}

# create and/or open yesterday's postmortem
function yesterday()
{
	date="$(date -j -v-1d +%Y-%m-%d)"
	year="$(date -j -v-1d +%Y)"
	month="$(date -j -v-1d +%m)"
	
	open_postmortem
}

# create and/or open a day's postmortem
function open_postmortem()
{
	local success=true
	local month_path="${postmortems_path}/${year}/${month}"
	local postmortem="${month_path}/Daily Postmortem-${date}.txt"
	
	# does the path for this month exist or need to be initialized
	if [ ! -d "$month_path" ]; then
		if ! init_postmortems; then
			success=false;
		fi
	fi
	
	if $success; then
		# do we need to create the daily postmortem?
		if [ ! -e "$postmortem" ]; then
			# create the daily postmortem
			if $verbose; then echo -n "Creating postmortem file '${postmortem}'... "; fi
			if ! cp "$template" "$postmortem"; then
				echo "ERROR! Unable to copy template to new file '${postmortem}'!"
				success=false
			else
				if $verbose; then echo "Done."; fi
			fi
		fi
		
		# open the postmortem
		if $success; then
			if $verbose; then echo "Opening '${postmortem}'..."; fi
			$editor "$postmortem"
		fi	
	else
		echo "ERROR! Something went wrong while initializing the postmortems paths! Unable to continue!"
	fi
	
	$success
}

# email a postmortem
function email()
{
	local success=true
	local postmortem="${postmortems_path}/${year}/${month}/Daily Postmortem-${date}.txt"
	
	# does today's daily postmortem exist?
	if [ ! -e "$postmortem" ]; then
		echo "ERROR! The file '${postmortem}' doesn't exist! Unable to proceed!"
		success=false;
	else
		# build the applescript commands to set email recipients (since this is dynamic
		# we need to do it prior to running the script)
		recipients_clause=''
		if [[ ( -n "${email_to[@]}" ) || ( -n "${email_cc[@]}" ) ]]; then
			recipients_clause="tell theMessage"$'\n'
			for address in "${email_to[@]}"; do
				recipients_clause="${recipients_clause}make new to recipient at end of to recipients with properties{address:\"${address}\"}"$'\n'
			done
			for address in "${email_cc[@]}"; do
				recipients_clause="${recipients_clause}make new cc recipient at end of cc recipients with properties{address:\"${address}\"}"$'\n'
			done
			recipients_clause="${recipients_clause}end tell"$'\n'
		fi
		
		# create the message in mail (yes, this is currently Mail-specific via AppleScript)
		if $verbose; then echo -n "Building new email in Mail with '${postmortem}' as the message body... "; fi
		local body=$(cat "$postmortem" | sed -E "s/\"/\\\\\"/g")
		if ! /usr/bin/osascript - 2>&1 >/dev/null <<-EOS
			tell application "Mail"
				set theMessage to make new outgoing message with properties {visible:true, subject:"Daily Postmortem ${date}", content:"${body}"}
				${recipients_clause}
				activate
				delay 1
				tell application "System Events" to keystroke "t" using {command down, shift down} -- convert message to plain text
			end tell
		EOS
		then
			echo "ERROR! An error occurred while trying to control Mail via AppleScript!"
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
	fi
	
	$success;
}

# parse a date out of a date parameter
function parse_date_param() 
{
	local success=true
	local in_str="$1"
	
	# default to today's date which should've been set on launch
	if [ -z "$in_str" -o "$in_str" == "today" ]; then
		success=true # do nothing
	# convert "yesterday" to a date
	elif [ "$in_str" == "yesterday" ]; then
		date="$(date -j -v-1d +%Y-%m-%d)"
		year="$(date -j -v-1d +%Y)"
		month="$(date -j -v-1d +%m)"
	# convert a YYYY-MM-DD formatted string to a date
	elif [[ "$in_str" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
		date="$(date -j -f "%Y-%m-%d" "$in_str" +%Y-%m-%d)"	# yes, this is redundant, but it also means it validates the date
		year="$(date -j -f "%Y-%m-%d" "$in_str" +%Y)"
		month="$(date -j -f "%Y-%m-%d" "$in_str" +%m)"
	else
		echo "ERROR! An invalid date string '$in_str' was specified!"
		success=false
	fi
	
	$success
}

# convert time (hours, minutes, a/p) to minutes
function time_to_mins() {
	local hours="$1"
	local minutes="$2"
	local am_pm="$3"
	
	# am?
	if [ "$am_pm" = "a" ]; then
		minutes=$(( ( $hours * 60 ) + 10#$minutes ))
	# pm?
	elif [ "$am_pm" = "p" ]; then
		minutes=$(( ( ( 12 + 10#$hours ) * 60 ) + 10#$minutes ))
	fi
	
	echo $minutes
}

# calculate hours worked during past n days
function hours()
{
	local success=true
	local days="$1"
	local total_mins_worked=0
	
	# calculate hours worked for the past week
	local i
	local i_start=1
	local i_end="$days"
	if $include_today; then
		i_start=0
		i_end=$(( days - 1 ))
	fi
	for (( i=i_start; i<=i_end; i++ )); do
		# build the path to the date's postmortem
		date="$(date -j -v-${i}d +%Y-%m-%d)"
		year="$(date -j -v-${i}d +%Y)"
		month="$(date -j -v-${i}d +%m)"
		local postmortem="${postmortems_path}/${year}/${month}/Daily Postmortem-${date}.txt"
		
		# does the postmortem exist for that day?
		if [ -e "$postmortem" ]; then
			local minutes_worked=0
			local line
			local start_time
			
			# read the postmortem line-by-line
			while read -r line; do
				# match lines that are start times
				if [[ "$line" =~ (Start|Arrival)\ Time:[\ \	]+([0-9]+):([0-9]{2})\ ?(a|p)m ]]; then
					# calculate start time in minutes
					start_time="$(time_to_mins ${BASH_REMATCH[2]} ${BASH_REMATCH[3]} ${BASH_REMATCH[4]})"
					#echo "START TIME: $start_time minutes"
				# match lines that are end times
				elif [[ "$line" =~ (Stop|Departure)\ Time:[\ \	]+([0-9]+):([0-9]{2})\ ?(a|p)m ]]; then
					# calculate stop time in minutes
					local stop_time="$(time_to_mins ${BASH_REMATCH[2]} ${BASH_REMATCH[3]} ${BASH_REMATCH[4]})"
					#echo "STOP TIME: $stop_time minutes"
					# add total minutes worked (stop time - start time) & reset the start time
					minutes_worked=$(( $minutes_worked + ( $stop_time - $start_time ) ))
					start_time=0;
				# match lines that are breaks
				elif [[ "$line" =~ Lunch\/Breaks:[\ \	]+(([0-9]+):)?([0-9]{2})\ ?min.* ]]; then
					local break_time
					if [ -z "${BASH_REMATCH[2]}" ]; then
						break_time="$(time_to_mins 0 ${BASH_REMATCH[3]} a)"
					else
						break_time="$(time_to_mins ${BASH_REMATCH[2]} ${BASH_REMATCH[3]} a)"
					fi
					#echo "BREAK TIME: $break_time minutes"
					
					# subtract break time from total minutes worked
					minutes_worked=$(( $minutes_worked - $break_time ))
				fi
			done < "$postmortem"
			
			# add the minutes worked to the running total
			total_mins_worked=$(( $total_mins_worked + $minutes_worked ))
			if $verbose; then
				printf "%s: %02i:%02i\n" "$date" "$(( $minutes_worked / 60 ))" "$(( $minutes_worked % 60 ))"
			fi
		elif $verbose; then
			echo "$date: n/a"
		fi
	done
	
	printf "Total Hours Worked (past %i days): %02i:%02i\n" "$days" "$(( $total_mins_worked / 60 ))" "$(( $total_mins_worked % 60 ))"
	
	$success
}

# find all issues worked on during past n days
function issues()
{
	local success=true
	local days="$1"
	local issues=()
	
	# find all the issues all the issues worked on for the specified number of days
	local i
	local i_start=1
	local i_end="$days"
	if $include_today; then
		i_start=0
		i_end=$(( days - 1 ))
	fi
	for (( i=i_start; i<=i_end; i++ )); do
		# build the path to the date's postmortem
		date="$(date -j -v-${i}d +%Y-%m-%d)"
		year="$(date -j -v-${i}d +%Y)"
		month="$(date -j -v-${i}d +%m)"
		local postmortem="${postmortems_path}/${year}/${month}/Daily Postmortem-${date}.txt"
		
		# does the postmortem exist for that day?
		if [ -e "$postmortem" ]; then
			local line
			
			# read the postmortem line-by-line & word-by-word (because bash's regexp doesn't support global matches)
			while read -r line; do
				for word in "${line[@]}"; do
					# match issue numbers (numbers preceded by a pound/hash symbol)
					if [[ "$word" =~ \#([0-9]+) ]]; then
						local j
						for (( j=1; j<${#BASH_REMATCH[*]}; j++ )); do
							#if $verbose; then echo "ISSUE: ${BASH_REMATCH[$j]}"; fi
							if ! in_array "${BASH_REMATCH[$j]}" "${issues[@]}"; then
								issues+=("${BASH_REMATCH[$j]}")
								#if $verbose; then echo "ISSUES: ${issues[@]}"; fi
							fi
						done
					fi
				done
			done < "$postmortem"
		fi
	done
	
	echo "Issues Worked On (past $days days):"
	for issue in "${issues[@]}"; do
		echo "  $issue"
	done
	
	$success;
}

# see if any arguments were passed in
if [ $# -gt 0 ]; then
	# if so, step through them all and pre-process them (we do this so we can 
	# support multiple options specified together, e.g.: -abc vs. -a -b -c),
	# GNU-style long options with alternate style values, and for easier
	# actual handling
	argv=()
	while [ $# -gt 0 ]; do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${1:0:1}" = "-" ]; then
			# is it a GNU-style long option (e.g. starts with a double-dash)?
			if [ "${1:0:2}" = "--" ]; then
				# push the option (everything before an equals) onto argv
				argv=("${argv[@]}" "${1%%=*}")
				
				# is it the alternate "--long-opt=value" format? if so, make it
				# "--long-opt value" format buy pushing the value (everything after the
				# equals) on as a separate argument
				case "$1" in *=*)
					argv=("${argv[@]}" "${1##*=}") ;;
				esac
			# otherwise, is it multiple single options specified together?
			elif [ ${#1} -gt 2 ]; then
				tmp="$1"
				# push each onto argv as single options
				for (( i=1; i < ${#tmp}; i++ )); do
					argv=("${argv[@]}" "-${tmp:$i:1}")
				done
			# otherwise, it must be a single option so just push it onto argv
			else
				argv=("${argv[@]}" "$1")
			fi
			shift
		# arguments just get pushed onto argv in order too
		else
			argv=("${argv[@]}" "$1")
			shift
		fi
	done
	argc=${#argv[@]}
		
	# now that we've pre-processed the options, go through them all for real
	for (( i=0; i<$argc; i++ )); do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${argv[$i]:0:1}" = "-" ]; then
			case "${argv[$i]}" in
				# see if the user intended us to run in verbose mode
				"-v" | "--verbose")
					verbose=true
					;;
				# see if the user requested help
				"-h" | "--help")
					usage
					exit
					;;
				# see if the user requested the version
				"-V" | "--version")
					version
					exit
					;;
				# see if the user requested to include today in reporting
				"-T" | "--include-today")
					include_today=true
					;;
				# handle other options
			
				# unknown option
				*)
					echo "$tool: Unknown option '$1'!"
					exit 1
					;;
			esac
		# handle arguments
		else
			case "${argv[$i]}" in
				"init")
					init_postmortems
					;;
				"today")
					today
					;;
				"yesterday")
					yesterday
					;;
				"template")
					template
					;;
				"email")
					(( i++ ))
					if [ -n "${argv[$i]}" ]; then
						if ! parse_date_param "${argv[$i]}" ; then
							exit 1
						fi
					fi
					email
					;;
				"hours")
				    (( i++ ))
				    if [ -n "${argv[$i]}" ]; then
				    	hours "${argv[$i]}"
				   	else
						hours 7
					fi
					;;
				"issues")
					(( i++ ))
					if [ -n "${argv[$i]}" ]; then
						issues "${argv[$i]}"
					else
						issues 7
					fi
					;;
				*)
					echo "$tool: Unknown command '${argv[$i]}'!"
					exit 1
					;;
			esac
		fi
	done
else
	echo "No options or arguments were specified!"$'\n'
	usage
	exit 1
fi
